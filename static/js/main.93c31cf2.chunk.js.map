{"version":3,"sources":["App.js","actions.js","component/Todo.container.jsx","serviceWorker.js","reducer.js","store.js","index.js"],"names":["App","_ref","todoList","addTodo","removeTodo","toggleTodo","currentView","updateView","todoInput","createRef","_useState","useState","_useState2","Object","slicedToArray","filteredList","setFilteredList","useEffect","react_default","a","createElement","className","type","ref","placeholder","onClick","e","current","value","filter","listItem","completed","map","_ref2","idx","todo","key","createAction","connect","state","todos","dispatch","index","Boolean","window","location","hostname","match","todosReducer","handleActions","_handleActions","defineProperty","payload","concat","toConsumableArray","slice","_ref3","currentTodo","objectSpread","currentViewReducer","handleAction","_ref4","reducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","Todo_container","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93c31cf2.chunk.js","sourcesContent":["import React, { createRef, useState, useEffect } from \"react\";\n// import { myAsync } from \"./actions\";\nimport \"./App.css\";\n\nfunction App({\n  todoList,\n  addTodo,\n  removeTodo,\n  toggleTodo,\n  currentView,\n  updateView\n}) {\n  const todoInput = createRef();\n  const gitUserNameRef = createRef();\n\n  // const getUser = async () => {\n  //   const usrs = await myAsync(\"nyowusu\");\n  //   console.log(usrs);\n  // };\n  // getUser();\n\n  const [filteredList, setFilteredList] = useState(todoList);\n  // const addAction = { type: \"ADD\" };\n  // const removeAction = { type: \"REMOVE\" };\n  // const toggleAction = { type: \"TOGGLE\" };\n\n  useEffect(() => {\n    setFilteredList(todoList);\n  }, [todoList]);\n\n  const handleAddItem = e => {\n    todoInput.current.value !== \"\" && addTodo(todoInput.current.value);\n    // dispatch(addAction);\n    todoInput.current.value = \"\";\n  };\n\n  const handleRemoveItem = index => {\n    removeTodo(index);\n    // dispatch(removeAction);\n  };\n\n  const handleToggle = index => {\n    toggleTodo(index);\n    // dispatch(toggleAction);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"todo-container\">\n        <div className=\"todo-text\">\n          <span>DAY - TODOS: </span>\n        </div>\n        <div className=\"todo-input\">\n          <input type=\"text\" ref={todoInput} placeholder={\"ENTER A TODO\"} />\n          <button onClick={handleAddItem}>Add Todo</button>\n        </div>\n\n        <div className=\"todo-selectors\">\n          <button\n            onClick={() => {\n              updateView(\"All\");\n              setFilteredList(todoList);\n            }}\n          >\n            <span>All Todos</span>\n          </button>\n          <button\n            className=\"completed\"\n            onClick={() => {\n              updateView(\"Completed\");\n              setFilteredList(\n                todoList.filter(listItem => listItem.completed === true)\n              );\n            }}\n          >\n            <span>Completed</span>\n          </button>\n          <button\n            onClick={() => {\n              updateView(\"Pending\");\n              setFilteredList(\n                todoList.filter(listItem => listItem.completed === false)\n              );\n            }}\n          >\n            <span>Pending</span>\n          </button>\n        </div>\n        <div className=\"todo-status\">\n          Currently showing: <span>{currentView}</span>\n        </div>\n        <div className=\"todo-list\">\n          {filteredList.map(({ todo, completed }, idx) => (\n            <li className=\"list-item\" key={idx}>\n              <span\n                onClick={() => handleToggle(idx)}\n                className={completed ? \"linethrough\" : \"lineoff\"}\n              >\n                {todo}\n              </span>\n              <button onClick={() => handleRemoveItem(idx)}>Remove</button>\n            </li>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { createAction } from \"redux-actions\";\n\nexport const addTodo = createAction(\"ADD\");\nexport const removeTodo = createAction(\"REMOVE\");\nexport const toggleTodo = createAction(\"TOGGLE\");\nexport const updateView = createAction(\"UPDATEVIEW\");\n\nexport const myAsyncFetchUser = id => async dispatch => {\n  try {\n    const userResponse = await fetch(`https://api.github.com/users/${id}`);\n    const user = await userResponse.json();\n    // return user;\n    dispatch(addTodo(user.name));\n  } catch (error) {\n    console.log(`Unable to fetch users: ${error}`);\n  }\n};\n","import { connect } from \"react-redux\";\nimport App from \"../App\";\nimport { removeTodo, updateView, toggleTodo, myAsyncFetchUser, addTodo } from \"../actions\";\n\nconst mapStateToProps = state => {\n  return { todoList: state.todos, currentView: state.currentView };\n};\n\n/**\n * using mapDispatchToProps as objections\n */\n// const mapDistpatchToProps = {\n//   addTodo: todo => ({ type: \"ADD\", item: todo }),\n//   removeTodo: index => ({ type: \"REMOVE\", index }),\n//   toggleTodo: index => ({ type: \"TOGGLE\", index })\n// };\n\n/**\n * as functions\n */\nconst mapDistpatchToProps = dispatch => ({\n  addTodo: todo => dispatch(addTodo(todo)),\n  // addTodo: id => dispatch(myAsyncFetchUser(id)),\n  removeTodo: index => dispatch(removeTodo(index)),\n  toggleTodo: index => dispatch(toggleTodo(index)),\n  updateView: currentView => dispatch(updateView(currentView))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDistpatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { handleActions, handleAction } from \"redux-actions\";\nimport { addTodo, removeTodo, toggleTodo, updateView } from \"./actions\";\n\nexport const todosReducer = handleActions(\n  {\n    [addTodo]: (state, { payload }) => [...state, { todo: payload, completed: false }],\n    [removeTodo]: (state, { payload }) => [...state.slice(0, payload), ...state.slice(payload + 1)],\n    [toggleTodo]: (state, { payload }) => {\n      let currentTodo = state[payload];\n      currentTodo.completed = !currentTodo.completed;\n      return [...state.slice(0, payload), { ...currentTodo }, ...state.slice(payload + 1)];\n    }\n  },\n  []\n);\n// export function todosReducer(state = [], action) {\n//   switch (action.type) {\n//     case \"ADD\":\n//       console.log(action);\n//       return [...state, { todo: action.item, completed: false }];\n\n//     case \"REMOVE\":\n//       return [...state.slice(0, action.index), ...state.slice(action.index + 1)];\n\n//     case \"TOGGLE\":\n//       console.log(action);\n//       let currentTodo = state[action.index];\n//       currentTodo.completed = !currentTodo.completed;\n//       return [...state.slice(0, action.index), { ...currentTodo }, ...state.slice(action.index + 1)];\n\n//     default:\n//       return state;\n//   }\n// }\n\nexport const currentViewReducer = handleAction(updateView, (state, { payload }) => payload, \"All\");\n// export function currentViewReducer(state = \"All\", action) {\n//   switch (action.type) {\n//     case \"UPDATEVIEW\":\n//       return action.currentView;\n//     default:\n//       return state;\n//   }\n// }\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { todosReducer, currentViewReducer } from \"./reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nconst reducers = combineReducers({ todos: todosReducer, currentView: currentViewReducer });\n\nconst store = createStore(reducers /**Used with Redux DevToosl */, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./component/Todo.container\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}